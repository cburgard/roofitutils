# Makefile to compile CombinationTool into a shared library
#
# Description
#   Compiles CombinationTool into a shared library to be used from Python, etc.
#   on various systems. The tool is based on ROOT, RooFit and RooStats. To setup
#   the environment, follow the instructions given in the README.
#
# Instructions to compile the library
#   1. Make sure that $(ROOTSYS) is set correctly. The easiest way is
#      source bin/thisroot.sh
#      in your ROOT base directory. Alternatively CVMFS can be used to setup ROOT.
#   2. Run make to build the shared library in lib.

MAKEFLAGS = --no-print-directory -r -s --pedantic -Wall

# Use Makefile.arch from ROOT
ifeq ($(ROOTSYS),)
$(error $$ROOTSYS is not defined)
endif
ROOT_MAKEFILE = $(firstword $(wildcard $(ROOTSYS)/etc/Makefile.arch $(ROOTSYS)/test/Makefile.arch))
ifeq ($(ROOT_MAKEFILE),)
$(error Could not find Makefile.arch under $(ROOTSYS)/etc or $(ROOTSYS)/test)
else
-include $(ROOT_MAKEFILE)
endif
ifeq ($(RC),)
ifeq ($(ROOTCONFIG),)
$(error $(ROOT_MAKEFILE) did not define $$RC or $$ROOTCONFIG)
else
RC = $(ROOTCONFIG)
endif
endif

# Configuration
PACKAGE          = RooFitUtils
OBJDIR           = obj
LIBDIR           = lib
LD_LIBRARY_PATH :=.:$(LIBDIR):$(ROOTSYS)/lib:$(LD_LIBRARY_PATH)
DEPDIR           = $(OBJDIR)/dep
VPATH            = $(OBJDIR)
INCLUDES         = -I. -I$(ROOTSYS)/include

CINTFLAGS        =
DICTHEAD         = $(PACKAGE)_Dict.h
DICTFILE         = $(PACKAGE)_Dict.C
DICTOBJ          = $(PACKAGE)_Dict.o
DICTLDEF         = Root/LinkDef.h
SKIPCPPLIST      =
SKIPHLIST        =  $(DICTHEAD) $(DICTLDEF)
LIBFILE          = ./lib/lib$(PACKAGE).a
SHLIBFILE        = ./lib/lib$(PACKAGE).so
DLLIBFILE        = ./lib/lib$(PACKAGE).dll
HEADERDEST       = ./RooFitUtils

UNAME            = $(shell uname)

INSTALLED_LIBS   = $(patsubst $(1)/lib%.$(DllSuf),-l%,$(wildcard $(patsubst %,$(1)/lib%.$(DllSuf),$(2))))
ROOTLIBDIR      := $(shell $(RC) --libdir)
ROOTLIBS        += $(call INSTALLED_LIBS,$(ROOTLIBDIR),HistFactory RooStats RooFit RooFitCore Thread Minuit Foam TreePlayer MathMore Html)
LINKLIBS         = $(ROOTLIBS) -lCombinationTool

default: shlib

# List of all source files to build
HLIST     = $(filter-out $(SKIPHLIST),$(wildcard RooFitUtils/*.h))
CPPLIST   = $(filter-out $(SKIPCPPLIST),$(patsubst src/%,%,$(wildcard src/*.$(SrcSuf))))
DICTHLIST = $(HLIST)

# List of all object files to build
OLIST     = $(patsubst %.cxx,%.o,$(CPPLIST))
OLIST     = $(CPPLIST:.$(SrcSuf)=.o)

# Executable programs, ending with .cpp by convention
BINDIR    = ./bin
BinSuf    = .cpp
BINLIST   = $(basename $(wildcard *$(BinSuf)))

# Implicit rule to compile all classes
%.o : src/%.cxx
	@echo "Compiling $<"
	@mkdir -p $(OBJDIR)
	#@echo $(CXX) $(CXXFLAGS) -g -c $< -o $(OBJDIR)/$(notdir $@) $(INCLUDES)
	@$(CXX) $(CXXFLAGS) -g -c $< -o $(OBJDIR)/$(notdir $@) $(INCLUDES)

# Rule to make the dictionary
$(DICTFILE):  $(DICTHLIST) $(DICTLDEF)
	@echo "Generating dictionary $@"
	$(ROOTSYS)/bin/rootcint -f $(DICTFILE) -c $(INCLUDES) $(CINTFLAGS) $^

$(OBJDIR)/$(DICTOBJ): $(DICTFILE)
	@echo "Compiling $<"
	@mkdir -p $(OBJDIR)
	@$(CXX) $(CXXFLAGS) -g -c $(INCLUDES) -o $@ $<

##############################
# The dependencies section
# - the purpose of the .d files is to keep track of the
#   header file dependence
# - this can be achieved using the makedepend command
##############################
# .d tries to pre-process .cc
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),distclean)
-include $(foreach var,$(CPPLIST:.$(SrcSuf)=.d),$(DEPDIR)/$(var)) /dev/null
endif
endif

$(DEPDIR)/%.d: %.$(SrcSuf)
	@mkdir -p $(DEPDIR)
	if test -f $< ; then \
		echo "Making $(@F)"; \
		$(SHELL) -ec '$(CPP) -MM $(CXXFLAGS) $(INCLUDES) $< | sed '\''/Cstd\/rw/d'\'' > $@'; \
	fi

# Rule to combine objects into a unix shared library
$(SHLIBFILE): $(OLIST) $(OBJDIR)/$(DICTOBJ)
	@echo "Making shared library: $(SHLIBFILE)"
	@rm -f $(SHLIBFILE)
	@mkdir -p $(LIBDIR)
	@$(LD) $(CXXFLAGS) $(SOFLAGS) $(addprefix $(OBJDIR)/,$(OLIST)) $(OBJDIR)/$(DICTOBJ) -o $(SHLIBFILE) $(ROOTLIBS)

# Useful build targets
lib: $(LIBFILE) 
shlib: $(SHLIBFILE) 
winlib: $(DLLIBFILE) 

clean:
	@echo "Deleting all libraries and executables..."
	rm -f $(DICTFILE) $(DICTHEAD)
	rm -f $(SHLIBFILE)
	rm -f $(OBJDIR)/*.o
	rm -f $(DEPDIR)/*.d
	rm -f $(LIBFILE)
	rm -f $(SHLIBFILE)
	rm -f $(DLLIBFILE)
	for ex in $(BINLIST); do \
		rm -f $(BINDIR)/$${ex}; \
	done

bin:	shlib
	mkdir -p $(BINDIR)
	for ex in $(BINLIST); do \
		echo "Linking $(BINDIR)/$${ex}"; \
		$(CXX) $(CXXFLAGS) -g $(INCLUDES) $(LINKLIBS) -lCombinationTool -o $(BINDIR)/$${ex} $${ex}$(BinSuf); \
	done

.PHONY : winlib shlib lib default clean distclean bin
